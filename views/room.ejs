<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room</title>
    <link rel="stylesheet" type="text/css" href="/style.css">
</head>

<body>
    <div class="container">
        <!-- Left Panel for Users -->
        <div class="left-panel">
            <h3>Users in the Room</h3>
            <ul id="userList">
                <% users.forEach(user=> { %>
                    <li>
                        <%= user %>
                    </li>
                    <% }); %>
            </ul>
        </div>

        <!-- Right Panel for Chat -->
        <div class="right-panel">
            <h1>Welcome to the Chat Room</h1>
            <p>Welcome, <span id="displayUsername"></span>! You are in the room.</p>

            <h3>Messages:</h3>
            <div id="messages"></div>

            <div class="message-input-container">
                <input type="text" id="messageInput" placeholder="Type a message..." />
                <button id="sendMessageBtn">Send</button>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>// Global Variables
        const roomId = "<%= roomId %>";
        const username = "<%= username %>";
        const localStorageRoomKey = `chatMessages_${roomId}`;

        // Store user and room details in localStorage
        function initializeLocalStorage() {
            localStorage.setItem('roomId', roomId);
            localStorage.setItem('username', username);
        }

        // Retrieve stored values from localStorage
        function getStoredData() {
            return {
                storedRoomId: localStorage.getItem('roomId'),
                storedUsername: localStorage.getItem('username'),
            };
        }

        // Display username on the page
        function displayUsername(username) {
            const displayUsernameElement = document.getElementById("displayUsername");
            displayUsernameElement.textContent = username;
        }

        // Connect to the socket server
        function initializeSocket(roomId) {
            return io({
                transports: ['websocket'],
                upgrade: false,
                query: { roomId },
            });
        }

        // Load and display messages from localStorage
        function loadMessages(container, storedRoomId, storedUsername) {
            const storedMessages = JSON.parse(localStorage.getItem(`chatMessages_${storedRoomId}`)) || [];
            container.innerHTML = ''; // Clear the container

            storedMessages.forEach((msg) => {
                if (isMessageExpired(msg.timestamp)) return; // Skip expired messages
                appendMessage(container, msg.by, msg.message, storedUsername);
            });

            scrollToBottom(container);
        }

        // Check if a message has expired
        function isMessageExpired(timestamp) {
            const oneDay = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
            return Date.now() - timestamp > oneDay;
        }

        // Append a single message to the chat container
        function appendMessage(container, by, message, storedUsername) {
            const messageElement = document.createElement("div");
            messageElement.classList.add('message', by === storedUsername ? 'self' : 'other');
            messageElement.innerHTML = `<span class="username">${by}</span>: ${message}`;
            container.appendChild(messageElement);
        }

        // Scroll to the bottom of the container
        function scrollToBottom(container) {
            container.scrollTop = container.scrollHeight;
        }

        // Save a message to localStorage
        function saveMessageToLocalStorage(roomId, message) {
            const storedMessages = JSON.parse(localStorage.getItem(`chatMessages_${roomId}`)) || [];
            storedMessages.push(message);
            localStorage.setItem(`chatMessages_${roomId}`, JSON.stringify(storedMessages));
        }

        // Handle incoming messages from the socket
        function handleIncomingMessage(socket, container, storedUsername, roomId) {
            socket.on("message", ({ by, message }) => {
                appendMessage(container, by, message, storedUsername);
                scrollToBottom(container);

                // Save the message locally
                saveMessageToLocalStorage(roomId, { by, message, timestamp: Date.now() });
            });
        }

        // Handle sending a new message
        function sendMessage(socket, inputField, container, storedUsername, roomId) {
            const messageText = inputField.value.trim();
            if (!messageText) return;

            // Emit the message to the server
            socket.emit("message", { username: storedUsername, roomId, message: messageText });

            // Append the message locally
            appendMessage(container, "You", messageText, storedUsername);

            // Save the message locally
            saveMessageToLocalStorage(roomId, { by: storedUsername, message: messageText, timestamp: Date.now() });

            // Clear the input field
            inputField.value = '';
            scrollToBottom(container);
        }

        // Add event listeners for message input and send button
        function initializeMessageSending(socket, inputField, sendButton, container, storedUsername, roomId) {
            sendButton.addEventListener("click", () => {
                sendMessage(socket, inputField, container, storedUsername, roomId);
            });

            inputField.addEventListener("keypress", (event) => {
                if (event.key === "Enter") sendMessage(socket, inputField, container, storedUsername, roomId);
            });
        }

        // Main initialization function
        function initializeChatApp() {
            // Initialize localStorage and retrieve stored data
            initializeLocalStorage();
            const { storedRoomId, storedUsername } = getStoredData();

            // Display username
            displayUsername(storedUsername);

            // Initialize socket connection
            const socket = initializeSocket(storedRoomId);

            // Get DOM elements
            const messagesContainer = document.getElementById("messages");
            const messageInput = document.getElementById("messageInput");
            const sendMessageBtn = document.getElementById("sendMessageBtn");

            // Load existing messages
            loadMessages(messagesContainer, storedRoomId, storedUsername);

            // Handle incoming messages
            handleIncomingMessage(socket, messagesContainer, storedUsername, storedRoomId);

            // Set up message sending functionality
            initializeMessageSending(socket, messageInput, sendMessageBtn, messagesContainer, storedUsername, storedRoomId);
        }

        // Run the chat application
        initializeChatApp();
    </script>
</body>

</html>